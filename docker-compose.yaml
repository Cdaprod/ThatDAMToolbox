########################################################################
# Root "/docker-compose.yaml"
########################################################################
name: thatdamtoolbox


########################################################################
# Optionally Included Infra-Grade Services
########################################################################
include:
  - path: ./docker/compose/docker-compose.postgres.yaml
  - path: ./docker/compose/docker-compose.weaviate.yaml
  - path: ./docker/compose/docker-compose.minio.yaml
  - path: ./docker/compose/docker-compose.registry.yaml


########################################################################
# Network Bridge "damnet"
########################################################################
networks:
  damnet:
    driver: bridge


services:
  ########################################################################
  # 0. one-shot host configurator (runs only with `--profile setup`)
  ########################################################################
  hotspot-installer:
    image: thatdam-hotspot-installer:latest     # the image with setup.sh
    privileged: true                            # needs NET_ADMIN, etc.
    network_mode: host                          # touches wlan0 directly
    profiles: ["setup"]                         # ← won’t start in the main stack
    environment:
      SETUP_TOKEN_FILE: /run/secrets/dam_token  # setup.sh picks it up
    secrets:
      - source: dam_ephemeral_token
        target: dam_token                       # → /run/secrets/dam_token
    restart: "no"                               # it exits after writing configs


  ########################################################################
  # 1. public front-door (owns :80 / :443 on the Pi)
  ########################################################################
  gw:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: thatdamtoolbox-gateway
    network_mode: host             # owns :80 / :443 on the Pi
    # profiles: ["gateway"]
    restart: unless-stopped
    depends_on:
      - api-gateway
      - video-web
      - video-api
    # If you choose bridge mode instead, comment network_mode and add:
    # networks: [damnet]
    # ports: ["80:80"]
    environment:
      # host-net → talk to services via 127.0.0.1
      API_HOST: "127.0.0.1"
      API_PORT: "8080"
      API_GW_HOST: "127.0.0.1"
      API_GW_PORT: "8081"
      WEB_HOST: "127.0.0.1"
      WEB_PORT: "3000"
    volumes:
      # allow you to override nginx.tmpl without rebuilding
      - ./docker/nginx/nginx.tmpl:/etc/nginx/nginx.tmpl:ro
      - ./docker/nginx/proxy_defaults.conf:/etc/nginx/proxy_defaults.conf:rw
      - ./docker/nginx/proxy_ws.conf:/etc/nginx/proxy_ws.conf:ro
      - ./docker/nginx/proxy_nobuf.conf:/etc/nginx/proxy_nobuf.conf:ro
      - ./docker/nginx/dev.crt:/etc/nginx/dev.crt:ro
      - ./docker/nginx/dev.key:/etc/nginx/dev.key:ro
      - ./docker/web-app/build:/usr/share/nginx/html:ro
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }


  ########################################################################
  # 2. infrastructure services
  ########################################################################
  rabbitmq:
    build:
      context: ./docker/rabbitmq
      dockerfile: Dockerfile
    image: cdaprod/thatdamtoolbox-rabbitmq   # was rabbitmq:3.13-alpine
    container_name: thatdamtoolbox-rabbitmq
    restart: unless-stopped
    networks: [damnet]
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: video
      RABBITMQ_DEFAULT_PASS: video
      RABBITMQ_DEFAULT_VHOST: /
    ports: ["5672:5672", "15672:15672"]   # 15672 optional (management UI)
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  ########################################################################
  # 3a. Golang- capture daemon (needs /dev + v4l2, so bridge is fine)
  ########################################################################
  capture-daemon:
    build:
      context: .
      dockerfile: host/services/capture-daemon/Dockerfile
    image: cdaprod/video-capture-daemon:latest    # Can omit for local dev, keep for registry pushes
    container_name: thatdamtoolbox-capture-daemon
    networks: [damnet]
    init: false
    privileged: true                        # Needed for /dev and v4l2
    pid: host
    ports:
      - "9000:9000"
    environment:
      EVENT_BROKER_URL: "amqp://video:video@rabbitmq:5672/"
      NEXT_PUBLIC_LOGIN_URL: "https://idp.example.com/login"
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: "example.com"
      OVERLAY_HUB_URL: "http://overlay-hub:8090"
      REGISTRY_URL: "docker.io/cdaprod/capture-daemon:latest"  # Or your actual registry/repo URL
      CAPTURE_OUTDIR: "/records"
      AUTH_TOKEN: "devtoken"
      ICE_SERVERS: "stun:stun.l.google.com:19302"       # Optional STUN/TURN list
      FFMPEG_HWACCEL: ""                                # e.g. "cuda -hwaccel_device 0"
    volumes:
      - /dev:/dev
      - /lib/modules:/lib/modules:ro
      - ./data/modules/hwcapture/records:/records   # Adjust to your persistent record dir
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:9000/devices"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - overlay-hub


  ########################################################################
  # 3b. Golang - camera proxy  (device-agnostic + hot-plug)
  ########################################################################
  camera-proxy:
    build:
      context: .
      dockerfile: host/services/camera-proxy/Dockerfile
    image: cdaprod/camera-proxy:latest
    container_name: thatdamtoolbox-camera-proxy
    networks: [damnet]
    ports: ["8000:8000"]
    # Device-agnostic, hot-plug capable:
    # - Mount the whole /dev so new /dev/video* nodes appear without restart
    # - Open cgroup rules for V4L2 (+DRM if you later use HW accel)
    # - No fixed `devices:` mapping, so it's idempotent on hosts with 0 cameras
    volumes:
      - /dev:/dev:rw,rshared
    device_cgroup_rules:
      - "c 81:* rmw"     # video4linux (/dev/video*)
      - "c 226:* rmw"    # DRM (/dev/dri/*) -- safe to keep for future HW accel
    # Optional: drop this if you don't care about container user groups
    group_add:
      - video
    # If your Docker host blocks some ioctls, flip this on as a last resort:
    # privileged: true
    environment:
      EVENT_BROKER_URL: "amqp://video:video@rabbitmq:5672/"
      NEXT_PUBLIC_LOGIN_URL: "https://idp.example.com/login"
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: "example.com"
      OVERLAY_HUB_URL: "http://overlay-hub:8090"
      CAPTURE_DAEMON_URL: "http://capture-daemon:9000"
      CAPTURE_DAEMON_TOKEN: "devtoken"
      ICE_SERVERS: "stun:stun.l.google.com:19302"
      FFMPEG_HWACCEL: ""  # e.g. "cuda -hwaccel_device 0" when using NV encoders
    # Health is OK even with 0 devices; your app serves /healthz regardless.
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5
    depends_on:
      - rabbitmq
      - overlay-hub
    restart: unless-stopped


  ########################################################################
  # 3c. Golang - overlay hub
  ########################################################################
  overlay-hub:
    build:
      context: host/services/overlay-hub
      dockerfile: Dockerfile
    image: cdaprod/overlay-hub:latest
    container_name: thatdamtoolbox-overlay-hub
    networks: [damnet]
    ports: ["8090:8090"]
    environment:
      JWKS_URL: "http://api-gateway:8080/.well-known/jwks.json"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8090/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo "waiting for JWKS at http://api-gateway:8080/.well-known/jwks.json"
        until wget -qO- http://api-gateway:8080/.well-known/jwks.json >/dev/null 2>&1; do
          sleep 2
        done
        exec /app/overlay-hub
    depends_on:
      - api-gateway
    restart: unless-stopped


  ########################################################################
  # 3d. Golang - host api gateway
  ########################################################################
  api-gateway:
    build:
      context: .
      dockerfile: host/services/api-gateway/Dockerfile
    image: cdaprod/api-gateway:latest
    container_name: thatdamtoolbox-api-gateway
    networks: [damnet]
    ports: ["8085:8080"]
    environment:
      EVENT_BROKER_URL: "amqp://video:video@rabbitmq:5672/"
      NEXT_PUBLIC_LOGIN_URL: "https://idp.example.com/login"
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: "example.com"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - rabbitmq
    restart: unless-stopped


  ########################################################################
  # 3e. Golang - host media api (video-api v2)
  ########################################################################
  media-api:
    profiles: ["media-api"]
    build:
      context: .
      dockerfile: host/services/media-api/Dockerfile
    image: cdaprod/media-api:dev
    container_name: thatdamtoolbox-media-api
    networks: [damnet]
    ports: ["8081:8080"]
    environment:
      EVENT_BROKER_URL: "amqp://video:video@rabbitmq:5672/"
    depends_on:
      - rabbitmq


  ########################################################################
  # 4a. FastAPI back-end (mapped => reachable on host :8080)
  ########################################################################
  video-api:
    build:
      context: .
      dockerfile: Dockerfile            # Multi-arch build
    image: cdaprod/video:dev
    container_name: thatdamtoolbox-video-api
    platform: linux/arm64               # Pi 5; drop for x86-64 dev
    # --- Networking (host-mode exposes 8080) ---
    # (Depriciated) network_mode: host
    networks: [damnet]
    ports: ["8080:8080"]              # Unneeded in host mode
    # --- Environment ---------------------------
    # privileged: true                  # depriciated for security compliance
    user: "1000:1000"
    # --- Device permissions & hotplug ----------
    devices: []
      #- /dev/video0:/dev/video0
      #- /dev/video1:/dev/video1
      #- /dev/vchiq:/dev/vchiq
      #- /dev/dri:/dev/dri               # DRM for encoders/GL
    device_cgroup_rules:
      - "c 81:* rmw"                    # hot-plug /dev/video*
    group_add:
      - "44"                            # video group (GID 44 on Pi OS)
    cap_add:
      - SYS_ADMIN                        # only if v4l2 needs ioctl that’s otherwise blocked
    environment:
      TZ:               "America/New_York"
      VIDEO_MODE:       "api"
      PYTHONWARNINGS:   >-
            ignore::DeprecationWarning,
            ignore::UserWarning:google.protobuf.runtime_version
      # __cache location so DAM can write__
      XDG_CACHE_HOME:   /data/cache
      HF_HOME:          /data/cache/huggingface
      TORCH_HOME:       /data/cache/torch
      UVICORN_WORKERS:        "1"       # dev: 1  •  prod: 4
      VIDEO_FORCE_STDHTTP:    "0"       # 1: Force stdlib HTTP (optional)
      # ------------------------------------------------------------------
      # Make ALL mutable data live under one bind-mount ( /data )
      # ------------------------------------------------------------------
      
      # __override any others if you want–but everything else will fall back into $VIDEO_DATA_DIR:__
      VIDEO_DATA_DIR:         /data
      VIDEO_MEDIA_ROOT:       /data/media
      VIDEO_PROCESSED_ROOT:   /data/_PROCESSED
      VIDEO_PREVIEW_ROOT:     /data/previews
      VIDEO_LOG_DIR:          /data/logs
      
      # ── WAL-only DB lives here (on local volume) ──
      VIDEO_DB_PATH:          /var/lib/thatdamtoolbox/db/live.sqlite3
      DB_SNAPSHOT_SECS:       "120"
      VIDEO_STORAGE:          "auto"
      VIDEO_DEBUG_BOOT:       "0"
      
      # --- Storage backend selector -------------
      # VIDEO_STORAGE:  "sqlite"                      # Default (no env needed)
      # VIDEO_STORAGE:  "faiss"                       # Use Faiss vector index
      # VIDEO_STORAGE:  "weaviate"                    # Use Weaviate backend
      WEAVIATE_URL:   "http://localhost:8082"         # For Weaviate backend:
      MINIO_ENDPOINT: "http://localhost:9000"         # Optional if your code needs it
      EVENT_BROKER_URL: "amqp://video:video@rabbitmq:5672/"
      NEXT_PUBLIC_LOGIN_URL: "https://idp.example.com/login"
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: "example.com"
      CAPTURE_REGISTRY_URL: "http://capture-daemon:9000"
    # --- Storage mounts ------------------------
    volumes:
      # __ 1) your SMB-mounted data (media, previews, etc.)__
      - "${DATA_ROOT:-./data}:/data:rw"
      # __2) incoming staging dir__
      - "${INCOMING_ROOT:-./incoming}:/data/_INCOMING:rw"
      # __3) local-only WAL DB__
      - db_wal:/var/lib/thatdamtoolbox/db:rw
      # __4) Live source for hot-reload (dev only)__
      - /dev:/dev:rw,rshared
      - ./video:/video:rw
    restart: unless-stopped
    depends_on:
      - capture-daemon
      - rabbitmq
    # --- Entrypoint & Health -------------------
    # entrypoint: ["python", "-m", "video"]
    # command: [stats]                         # CLI command (optional)
    command: ["serve", "--host", "0.0.0.0", "--port", "8080"]
    mem_limit: 1500m
    cpus: 1.0
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -o /dev/null -H 'X-Health-Check: 1' http://localhost:8080/health"]
      interval: 120s   # was 60s; stretch it if you don’t need tight liveness
      timeout: 3s
      retries: 3


  ########################################################################
  # 4b. optional CLI job
  ########################################################################
  video-cli:
    image: cdaprod/video:dev
    container_name: thatdamtoolbox-video-cli-ephemeral
    networks: [damnet]
    profiles: [hydrate-backend, cli]
    entrypoint: ["python", "-m", "video"]
    # one-off scan job
    command: ["scan", "--root", "/data/_INCOMING", "--workers", "1"]
    # same mounts as video-api
    volumes:
      - /mnt/b/Video/thatdamtoolbox:/data:rw
      - /mnt/b/Video/_INCOMING:/data/_INCOMING:rw
      - db_wal:/var/lib/thatdamtoolbox/db:rw
    # do not restart this service automatically
    restart: "no"
    depends_on:
      - video-api


  ########################################################################
  # 5a. Next.js Web App Server (exposed only for dev)
  ########################################################################
  video-web:
    build:
      context: ./docker/web-app
      dockerfile: Dockerfile
      target: development
    image: cdaprod/video-web:dev
    container_name: thatdamtoolbox-video-web-app
    platform: linux/arm64
    ports:
      - "3000:3000"
    networks: [damnet]
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_BASE_URL: "http://video-api:8080"
      NEXT_PUBLIC_WS_URL: "ws://video-api:8080/ws/camera"
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
      EVENT_BROKER_URL: "amqp://video:video@rabbitmq:5672/"
      NEXT_PUBLIC_LOGIN_URL: "https://idp.example.com/login"
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: "example.com"
    volumes:
      - ./docker/web-app:/app:rw
      - /app/node_modules           # Anonymous volume, container owns it
      - /app/.next                  # Anonymous volume, container owns it
    group_add:
      - "video"
    device_cgroup_rules:
      - 'c 81:* rmw'
    depends_on:
      - video-api
    restart: unless-stopped
    mem_limit: 512m
    cpus: 0.5
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3


  ########################################################################
  # 5b. Next.js Web Site Server (exposed only for dev)
  ########################################################################
  web-site:
    build:
      context: ./docker/web-site
      dockerfile: Dockerfile
      target: development
    image: cdaprod/web-site:dev
    container_name: thatdamtoolbox-web-site
    platform: linux/arm64
    ports:
      - "3001:3000"
    networks: [damnet]
    environment:
      NODE_ENV: development
      EVENT_BROKER_URL: "amqp://video:video@rabbitmq:5672/"
      NEXT_PUBLIC_LOGIN_URL: "https://idp.example.com/login"
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: "example.com"
    volumes:
      - ./docker/web-site:/app:rw
      - /app/node_modules
      - /app/.next
    entrypoint: ["/bin/sh","-c","chmod +x /app/entrypoint.sh && /app/entrypoint.sh"]
    depends_on:
      - rabbitmq
    restart: unless-stopped
    mem_limit: 256m
    cpus: 0.25
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3


########################################################################
# (Optional) hotspot-installer secrets
########################################################################
secrets:
  dam_ephemeral_token:
    external: false
    # Dummy content when not actually needed
    environment: "DUMMY_TOKEN"
 

########################################################################
# container mounted volumes
########################################################################
volumes:
  db_wal:
    driver: local
  rabbitmq_data: 