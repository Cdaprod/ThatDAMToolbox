version: "3.9"

services:
  # ────────────────────────────────────────────────────────────────────────────
  # A) DEFAULT: SAFE DISCOVERY (no docker.sock, no privileged)
  # ────────────────────────────────────────────────────────────────────────────
  discovery:
    build:
      context: .
      dockerfile: host/services/discovery/Dockerfile
    image: cdaprod/thatdam-discovery:latest
    container_name: thatdamtoolbox-discovery
    # Host network makes mDNS/Serf UDP easy; if you only use pion/mdns and in-proc serf,
    # host net is still simplest across Pi/desktop.
    network_mode: host
    restart: unless-stopped
    environment:
      DISCOVERY_BACKEND: ${DISCOVERY_BACKEND:-auto}     # auto|mdns|serf
      SERVICE_NAME: ${SERVICE_NAME:-thatdam}
      SERVICE_PORT: ${SERVICE_PORT:-8080}
      DISCOVERY_HTTP_PORT: ${DISCOVERY_HTTP_PORT:-9999}
      LEADER_FILE: ${LEADER_FILE:-/run/discovery/leader.env}
      LOG_FORMAT: text
      # SERF_JOIN: "10.0.0.12:7946,10.0.0.13:7946"       # optional seeds if you want
      # DISCOVERY_ORCHESTRATE: "false"                   # stays off by default
    volumes:
      - discovery-run:/run/discovery
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:9999/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # ────────────────────────────────────────────────────────────────────────────
  # B) OPTIONAL: ORCHESTRATOR PROFILE (off by default)
  #    Enables discovery to run `docker compose` on the host.
  #    Use: `docker compose -f docker/compose/docker-compose.discovery.yaml --profile orchestrator up -d`
  # ────────────────────────────────────────────────────────────────────────────
  discovery-orchestrator:
    extends:
      service: discovery
    container_name: thatdamtoolbox-discovery-orchestrator
    profiles: ["orchestrator"]
    environment:
      DISCOVERY_ORCHESTRATE: "true"
      LOG_FORMAT: text
      # If your discovery code shells out to `docker compose`, the plugin must be available on host.
    volumes:
      - discovery-run:/run/discovery
      - /var/run/docker.sock:/var/run/docker.sock:rw
    # keep this unprivileged; docker.sock mount is already high-privilege.
    # if you later add tailscale-in-container or external daemons, revisit caps/privileged.

volumes:
  discovery-run:
    driver: local