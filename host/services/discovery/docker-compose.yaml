# docker-compose.discovery.yaml
# Add this to your existing docker-compose.yaml or include it

services:
  # The new discovery service that replaces manual docker-compose execution
  discovery:
    build:
      context: .
      dockerfile: host/services/discovery/Dockerfile
    image: cdaprod/thatdam-discovery:latest
    container_name: thatdamtoolbox-discovery
    network_mode: host  # Required for mDNS multicast and direct host access
    privileged: true    # Needed to control Docker on host
    restart: unless-stopped
    
    environment:
      # Discovery backend preference
      DISCOVERY_BACKEND: "${DISCOVERY_BACKEND:-auto}"  # auto, mdns, serf, tailscale
      
      # Serf cluster join address (optional)
      SERF_JOIN: "${SERF_JOIN:-}"
      
      # Service configuration
      SERVICE_NAME: "thatdam-server"
      SERVICE_PORT: "8080"
      HEALTH_PORT: "9999"
      
      # Docker host configuration
      DOCKER_HOST: "unix:///var/run/docker.sock"
      COMPOSE_FILE: "/app/docker-compose.yaml"
      
      # Tailscale configuration (if using Tailscale)
      TAILSCALE_AUTHKEY: "${TAILSCALE_AUTHKEY:-}"
      
      # Logging level
      LOG_LEVEL: "${LOG_LEVEL:-info}"
    
    volumes:
      # Docker socket to control containers
      - /var/run/docker.sock:/var/run/docker.sock:rw
      
      # Host network configuration access
      - /etc/hostname:/etc/hostname:ro
      - /etc/hosts:/etc/hosts:ro
      
      # Compose files and configs
      - .:/app:ro
      
      # Tailscale state (if using Tailscale)
      - tailscale_state:/var/lib/tailscale
    
    ports:
      - "9999:9999"  # Health check and discovery API
      - "7946:7946/udp"  # Serf gossip port
    
    labels:
      - "com.thatdam.service=discovery"
      - "com.thatdam.role=orchestrator"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/health"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    
    depends_on: []  # No dependencies - this starts first

volumes:
  tailscale_state:
    driver: local

networks:
  # Use existing damnet if available
  damnet:
    external: true
    name: thatdamtoolbox_damnet