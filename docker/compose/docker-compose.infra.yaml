# docker/compose/docker-compose.infra.yaml
name: thatdamtoolbox  # must match root compose file

services:
# ──────────────────────────────────────────────────────────────
# Nginx Gateway
# ──────────────────────────────────────────────────────────────
  nginx:
    image: nginx:latest
    profiles: [nginx]
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      # If you build static frontend into ./docker/html:
      - ./docker/html:/usr/share/nginx/html:ro
    ports:
      - "80:80"
    depends_on:
      - video-api
      - video-web

# ──────────────────────────────────────────────────────────────
# Event-broker
# ──────────────────────────────────────────────────────────────
  rabbitmq:
    image: rabbitmq:3.13-alpine
    container_name: thatdamtoolbox-rabbitmq
    restart: unless-stopped
    networks: [damnet]
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: video
      RABBITMQ_DEFAULT_PASS: video
      RABBITMQ_DEFAULT_VHOST: /
    ports: ["5672:5672", "15672:15672"]   # 15672 optional (management UI)
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# ──────────────────────────────────────────────────────────────
# Object-store
# ──────────────────────────────────────────────────────────────
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER:     minio
      MINIO_ROOT_PASSWORD: minio123
      # ── Webhook target "primary" ────────────────────────────
      MINIO_NOTIFY_WEBHOOK_ENABLE_primary: "on"           #  [oai_citation:0‡Documentation](https://docs.min.io/enterprise/aistor-object-store/administration/bucket-notifications/publish-events-to-webhook/?utm_source=chatgpt.com)
      MINIO_NOTIFY_WEBHOOK_ENDPOINT_primary: "http://webhook:5000/events"  #  [oai_citation:1‡MinIO](https://min.io/docs/minio/linux/reference/minio-server/settings/notifications/webhook-service.html?utm_source=chatgpt.com)
      MINIO_NOTIFY_WEBHOOK_AUTH_TOKEN_primary: ""         # optional
    ports: ["9000:9000","9001:9001"]
    volumes: ["./data/minio:/data"]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:9000/minio/health/ready"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

# ──────────────────────────────────────────────────────────────
# Weaviate vector-DB
# ──────────────────────────────────────────────────────────────
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: weaviate_server
    command: ["--host","0.0.0.0","--port","8080","--scheme","http"]
    ports: ["8081:8080","50051:50051"]
    environment:
      QUERY_DEFAULTS_LIMIT:                 25
      DEFAULT_VECTORIZER_MODULE:            'none'
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH:                /var/lib/weaviate
      ENABLE_MODULES:                       backup-s3
      BACKUP_S3_BUCKET:                     weaviate-backups
      BACKUP_S3_ENDPOINT:                   http://minio:9000
      BACKUP_S3_ACCESS_KEY_ID:              minio
      BACKUP_S3_SECRET_ACCESS_KEY:          minio123
      BACKUP_S3_USE_SSL:                    'false'
      CLUSTER_HOSTNAME:                     node1
      POSTGRES_HOST:                        postgres
      POSTGRES_PASSWORD:                    weaviate
      POSTGRES_USER:                        weaviate
      POSTGRES_DB:                          weaviate
    volumes: ["./data/weaviate:/var/lib/weaviate"]
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:8080/v1/.well-known/ready"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

# ──────────────────────────────────────────────────────────────
# Postgres (Weaviate’s vector index)
# ──────────────────────────────────────────────────────────────
  postgres:
    image: postgres:15
    container_name: weaviate_pg
    environment:
      POSTGRES_USER:      weaviate
      POSTGRES_PASSWORD:  weaviate
      POSTGRES_DB:        weaviate
    ports: ["5432:5432"]
    volumes: ["./data/postgres:/var/lib/postgresql/data"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

# ──────────────────────────────────────────────────────────────
# Simple Flask receiver for MinIO events (matches your blog demo)
# ──────────────────────────────────────────────────────────────
  webhook:
    image: python:3.11-slim
    container_name: minio_webhook_receiver
    volumes: ["./scripts/webhook:/app"]
    working_dir: /app
    command: ["python","receiver.py"]         # tiny Flask app
    ports: ["5000:5000"]

# ──────────────────────────────────────────────────────────────
# (No changes here to your main video-api stack – it remains in the
# root compose file and can be started alone or with –f infra.yaml)
# ──────────────────────────────────────────────────────────────
  overlay-hub:
    build:
      context: ./host/services/overlay-hub
    image: cdaprod/overlay-hub:${IMAGE_TAG:-dev}
    container_name: thatdamtoolbox-overlay-hub
    ports: ["8090:8090"]
    networks: [damnet]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
