name: Sync PR Milestone

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  apply-milestone:
    runs-on: ubuntu-latest
    steps:
      - name: Extract milestone title
        id: extract
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          set -euo pipefail

          # Normalize/scan for "Milestone:" in body first, then title (case-insensitive)
          # Matches forms like "Milestone: My Title", trims leading/trailing spaces
          extract_ms () {
            awk 'BEGIN{IGNORECASE=1}
              match($0, /Milestone:[[:space:]]*(.*)$/, m) { print m[1]; exit }' \
            | sed 's/^[[:space:]]*//; s/[[:space:]]*$//'
          }

          body_ms="$(printf "%s\n" "$PR_BODY"  | extract_ms || true)"
          title_ms=""

          if [[ -z "${body_ms}" ]]; then
            title_ms="$(printf "%s\n" "$PR_TITLE" | extract_ms || true)"
          fi

          final_ms="${body_ms:-$title_ms}"

          # Emit output (empty string if none)
          echo "title=${final_ms}" >> "$GITHUB_OUTPUT"

          echo "Found Milestone Title: ${final_ms:-<none>}"

      - name: Resolve milestone and assign to PR
        if: ${{ steps.extract.outputs.title != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = context.payload.pull_request.number;

            // Take the extracted title from the previous step
            const title = `${{ steps.extract.outputs.title }}`.trim();

            async function findMilestone(title) {
              for (const state of ['open', 'closed']) {
                const pages = await github.paginate(
                  github.rest.issues.listMilestones,
                  { owner, repo, state, per_page: 100 }
                );
                const hit = pages.find(m => (m.title || '').trim() === title);
                if (hit) return hit;
              }
              return null;
            }

            let ms = await findMilestone(title);

            if (!ms) {
              const created = await github.rest.issues.createMilestone({
                owner,
                repo,
                title,
                state: 'open'
              });
              ms = created.data;
              core.info(`Created milestone: "${title}" (#${ms.number})`);
            }

            await github.rest.issues.update({
              owner, repo,
              issue_number: prNum,
              milestone: ms.number
            });
            core.info(`Assigned milestone #${ms.number} "${ms.title}" to PR #${prNum}.`);

      - name: Comment success (idempotent-ish)
        if: ${{ steps.extract.outputs.title != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = context.payload.pull_request.number;
            const title = `${{ steps.extract.outputs.title }}`.trim();

            await github.rest.issues.createComment({
              owner, repo, issue_number: prNum,
              body: `üîó Milestone synced: **${title}**`
            });

      - name: Warn if missing
        if: ${{ steps.extract.outputs.title == '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner, repo, issue_number: prNum,
              body: "‚ö†Ô∏è No `Milestone:` line found in PR body or title. Add a line like `Milestone: <exact existing milestone title>`."
            });