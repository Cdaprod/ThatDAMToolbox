name: CI Host Go Binaries & Release

on:
  push:
    branches: ["**"]
    tags:     ["**"]
    paths:
      - "host/services/**"
      - "Makefile"
      - "**/go.*"
      - "scripts/systemd/*.service"
      - ".github/workflows/ci-host-go-binaries.yml"
  pull_request:
    branches: ["**"]
    paths:
      - "host/services/**"
      - "Makefile"
      - "**/go.*"
      - "scripts/systemd/*.service"
      - ".github/workflows/ci-host-go-binaries.yml"
  workflow_dispatch: {}

jobs:
  build-go-host:
    name: Build & Test Go Host Binaries
    runs-on: ubuntu-latest
    env:
      GO_VERSION: "1.22.x"
      GOFLAGS: "-trimpath -buildvcs=true -p=2"
      GOMAXPROCS: "2"
      CGO_ENABLED: "0"
      ENABLE_RACE: ${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')) && '1' || '0' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go (with per-module cache)
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true
          cache-dependency-path: |
            host/services/**/go.sum

      - name: Extra build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-gobuild-${{ hashFiles('host/services/**/go.sum') }}
          restore-keys: ${{ runner.os }}-gobuild-

      - name: Print runner resources (debug)
        run: |
          uname -a
          free -h
          df -h

      - name: Discover modules (respect go.work; skip host/legacy)
        id: mods
        shell: bash
        run: |
          set -euo pipefail
          if [ -f go.work ]; then
            mapfile -t MODS < <(go work edit -json | awk -F'"' '/"DiskPath"/{print $4"/go.mod"}')
          else
            mapfile -t MODS < <(git ls-files '**/go.mod' | grep -vE '/vendor/')
          fi
          MODS=($(printf '%s\n' "${MODS[@]}" | grep -vE '^host/legacy/'))
          printf '%s\n' "${MODS[@]}" | tee /tmp/mods.txt

      - name: Build binaries (bounded, per module)
        shell: bash
        run: |
          set -euo pipefail
          RACE_FLAG=""
          [ "${ENABLE_RACE}" = "1" ] && RACE_FLAG="-race"
          mkdir -p out/bin

          while IFS= read -r mod; do
            dir="$(dirname "$mod")"
            echo "ðŸ”¨ Building in $dir"
            pushd "$dir" >/dev/null
              # Keep dependencies tidy for reproducibility; don't fail the job on minor deltas here
              go mod tidy || true

              # pick build target per module
              bin=""
              if [ -f "./cmd/main.go" ]; then
                # typical layout (api-gateway)
                bin="$(basename "$(dirname "$PWD")")"
                go build ${RACE_FLAG} -o "../../out/bin/${bin}" ./cmd
              elif [ -f "./main.go" ]; then
                # module root main (camera-proxy, capture-daemon)
                bin="$(basename "$PWD")"
                go build ${RACE_FLAG} -o "../../out/bin/${bin}" .
              else
                echo "No main package found in $dir; skipping build"
              fi
            popd >/dev/null
          done < /tmp/mods.txt

          echo "Built binaries:"
          ls -l out/bin || true

      - name: Unit tests (sequential, low parallelism)
        shell: bash
        run: |
          set -euo pipefail
          RACE_FLAG=""
          [ "${ENABLE_RACE}" = "1" ] && RACE_FLAG="-race"
          # Test only active services to keep memory low
          for dir in host/services/shared host/services/api-gateway host/services/capture-daemon host/services/camera-proxy; do
            if [ -f "$dir/go.mod" ]; then
              echo "ðŸ§ª go test $dir"
              ( cd "$dir" && go test ./... ${RACE_FLAG} -count=1 -timeout=6m -p=2 -parallel=2 )
            fi
          done

      - name: Upload host Go binaries
        uses: actions/upload-artifact@v4
        with:
          name: host-go-binaries
          path: |
            out/bin/**
          if-no-files-found: warn

      - name: Upload systemd service files
        uses: actions/upload-artifact@v4
        with:
          name: host-systemd-services
          path: scripts/systemd/*.service
          if-no-files-found: warn

  release-host-binaries:
    name: Package & Release Host Binaries
    runs-on: ubuntu-latest
    needs: build-go-host
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download host Go binaries artifact
        uses: actions/download-artifact@v4
        with:
          name: host-go-binaries
          path: host-binaries

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Package Host Binaries
        run: |
          tar czf host-binaries-${{ github.ref_name }}.tar.gz -C host-binaries .
          ls -lh host-binaries-${{ github.ref_name }}.tar.gz

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./host-binaries-${{ github.ref_name }}.tar.gz
          asset_name: host-binaries-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip