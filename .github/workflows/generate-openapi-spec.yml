name: Generate OpenAPI Specs in CI

on:
  push:
    paths:
      - 'host/services/capture-daemon/openapi.yaml'
      - 'video/**'
      - 'docker/web-app/**'
      - 'host/services/capture-daemon/**'
      - '**/go.*'
      - '**/*.go'
      - '**/*.ts'
      - '**/*.py'
  workflow_dispatch:

# ‚úÖ allow committing generated code back to the repo
permissions:
  contents: write

jobs:
  generate-clients:
    name: ‚ú® Generate API Clients
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }
    strategy:
      matrix:
        generator:
          - id: go
            cwd: host/services/capture-daemon
            lang: go
            output: api/gen
            extra: "--additional-properties=packageName=captureapi --global-property=apiTests=false,modelTests=false,apiDocs=false,modelDocs=false"
            candidates: "host/services/capture-daemon/openapi.yaml|capture-daemon/openapi.yaml"
          - id: typescript
            cwd: docker/web-app
            lang: typescript-axios
            output: src/lib/api/gen
            extra: "--additional-properties=supportsES6=true,useSingleRequestParameter=true --global-property=apiTests=false,modelTests=false,apiDocs=false,modelDocs=false"
            candidates: "video/api/openapi.yaml|video/openapi.yaml|host/services/video-api/openapi.yaml"
          - id: python
            cwd: video
            lang: python
            output: python_client
            extra: "--global-property=apiTests=false,modelTests=false,apiDocs=false,modelDocs=false"
            candidates: "video/api/openapi.yaml|video/openapi.yaml|host/services/video-api/openapi.yaml"

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  # ‚úÖ needed for auto-commit with GITHUB_TOKEN

      - name: Set up Java (OpenAPI Generator)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Set up Node (for CLI install)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install OpenAPI Generator CLI
        run: npm install -g @openapitools/openapi-generator-cli@6.6.0

      - name: Resolve OpenAPI spec path
        id: resolve
        run: |
          IFS='|' read -r -a CANDS <<< "${{ matrix.generator.candidates }}"
          SPEC=""
          for p in "${CANDS[@]}"; do
            if [ -f "$p" ]; then SPEC="$p"; break; fi
          done
          if [ -z "$SPEC" ]; then
            echo "‚ùå No OpenAPI spec found: ${{ matrix.generator.candidates }}"
            exit 1
          fi
          echo "spec=$SPEC" >> "$GITHUB_OUTPUT"
          echo "Resolved spec: $SPEC"

      - name: Generate ${{ matrix.generator.id }} client
        working-directory: ${{ matrix.generator.cwd }}
        run: |
          # clean to avoid stale files / churn
          rm -rf "${{ matrix.generator.output }}" .openapi-generator .openapi-generator-ignore
          openapi-generator-cli generate \
            -i "${{ steps.resolve.outputs.spec }}" \
            -g "${{ matrix.generator.lang }}" \
            -o "${{ matrix.generator.output }}" \
            ${{ matrix.generator.extra }}

      - name: Commit generated client
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: regen ${{ matrix.generator.id }} client"
          file_pattern: |
            ${{ matrix.generator.cwd }}/${{ matrix.generator.output }}/**

  build-and-test:
    name: üõ†Ô∏è Build & Test
    needs: generate-clients
    runs-on: ubuntu-latest
    defaults: { run: { shell: bash } }
    strategy:
      matrix:
        service:
          - { name: capture-daemon, lang: go,     dir: host/services/capture-daemon }
          - { name: video,          lang: python, dir: video }
          - { name: web-app,        lang: node,   dir: docker/web-app }
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Go
        if: matrix.service.lang == 'go'
        uses: actions/setup-go@v5
        with: { go-version: '1.23.x' }

      - name: Setup Python
        if: matrix.service.lang == 'python'
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }

      - name: Setup Node
        if: matrix.service.lang == 'node'
        uses: actions/setup-node@v4
        with: { node-version: '18' }

      - name: Build & Test ${{ matrix.service.name }}
        working-directory: ${{ matrix.service.dir }}
        run: |
          case "${{ matrix.service.name }}" in
            capture-daemon)
              go build -o bin/capture-daemon ./...
              go test ./... -v -race -count=1
              ;;
            video)
              python -m pip install --upgrade pip wheel
              pip install -r requirements.txt
              pytest -q
              ;;
            web-app)
              npm ci
              npm run build
              npm run lint
              npm run type-check
              ;;
          esac